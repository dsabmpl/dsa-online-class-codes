// Approach - 1 Brute Force Approach
// class Solution {
//     public int fib(int n) {
//         if(n<=1){
//             return n;
//         }
//         return fib(n-1) + fib(n-2);
//     }
// }

// Approach - 2 Memoization
// class Solution {
//     // 0 --> 0 , 1 --> 1
//     // TC O(N) , SC O(N)
//     HashMap<Integer, Integer> cache = new HashMap<>(Map.of(0,0, 1,1)); // take care base case
//     public int fib(int n) {
//         // if already compute it , so return from the cache
//         if(cache.containsKey(n)){
//             return cache.get(n);
//         }
//         // if not in cache so compute first and store in cache
//         cache.put(n,  fib(n-1) + fib(n-2));
//         return cache.get(n);
//     }
// }

// Approach - 3 Tabulation (Bottom Up Approach)
class Solution {
   
    
    public int fib(int n) {
        if(n<=1){
            return n;
        }
        int cache[] = new int[n+1];
       // cache[0] = 0; 
       cache[1] = 1;
       for(int i = 2 ; i<=n ; i++){
        // fib(n-1) + fib(n-2);
            cache[i] = cache[i-1] + cache[i-2];
       }
       return cache[n];
    }
}
