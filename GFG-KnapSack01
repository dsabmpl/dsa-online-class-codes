// class Solution {
//     static int dp[][];
//     static int knapsack(int W, int val[], int wt[]) {
//         // code here
//         dp = new int[val.length+1][W+1];
//         for(int i = 0; i<dp.length; i++){
//             for(int j = 0; j<dp[i].length; j++){
//                 dp[i][j]=-1;
//             }
//         }
//         return helper(W, val, wt, 0, val.length);
        
//     }
//     static int helper(int W, int val[], int wt[], int currentIndex, int n){
//         // Base case
//         if(currentIndex == n){
//             return 0;
//         }
//         if(W ==0){
//             return 0;
//         }
//         // Already in Cache so dont compute it just return it
//         if(dp[currentIndex][W]!=-1){
//             return dp[currentIndex][W];
//         }
//         // Leave It
//         int valueAfterLeave = helper(W, val, wt, currentIndex + 1, n);
//         // Take It
//         int valueAfterTake = 0;
//         if(wt[currentIndex] <= W){
//             valueAfterTake = val[currentIndex] + helper(W - wt[currentIndex], val, wt , currentIndex + 1, n);
//         }
//         // check which one give max value
//         dp[currentIndex][W] =  Math.max(valueAfterLeave, valueAfterTake);
//         return dp[currentIndex][W];
//     }
// }

class Solution{
     static int knapsack(int W, int val[], int wt[]) {
        int n = val.length;
        int dp[][] = new int[n+1][W+1];
        // for(int i = 0 ; i<=W; i++){ // Base case fill
        //     dp[0][i] = 0;
        // }
        for(int currentItem = 1; currentItem<=n; currentItem++){
            for(int currentCapacity = 1; currentCapacity<=W; currentCapacity++ ){
                // Choice - 1 Leave it
                 int valueAfterLeave = dp[currentItem-1][currentCapacity];
                // Choice - 2 Take it
                int valueAfterTake = 0;
                if(wt[currentItem-1]<=currentCapacity){
                    valueAfterTake = val[currentItem-1] + dp[currentItem-1][currentCapacity - wt[currentItem-1]];
                }
                dp[currentItem][currentCapacity] = Math.max(valueAfterLeave, valueAfterTake);
            }
        }
        return dp[n][W];
         
     }
}
