class Solution {
    public int[] bellmanFord(int V, int[][] edges, int src) {
        // Step 1: Create distance array and set everything to âˆž (unreachable)
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0; // Distance to self is 0

        // Step 2: Relax all edges V - 1 times
        for (int i = 0; i < V - 1; i++) {
            for (int[] edge : edges) {
                int u = edge[0];
                int v = edge[1];
                int wt = edge[2];

                // Only update if source is already reachable
                if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }

        // Step 3: Check for negative weight cycle (extra round)
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];

            if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[v]) {
                return new int[] { -1 }; // Negative cycle found
            }
        }

        // Step 4: Replace unreachable distances with 1e8 (100000000)
        for (int i = 0; i < V; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                dist[i] = 100000000; // GFG requires this
            }
        }

        return dist;
    }
}
