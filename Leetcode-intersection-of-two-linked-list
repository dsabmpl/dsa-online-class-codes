public class Solution {
    // Approach - 2 TC O(N) SC O(1)
     public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null){
            return null;
        }
        ListNode a = headA;
        ListNode b = headB;
        // loop until a != b (it means no intersection point found till)
        while(a!=b){
            a = (a==null) ? headB : a.next;
            b = (b==null)? headA: b.next;
        }
        return a;
     }

    // TC O(N) , SC O(N) - Approach - 1 (Using Set as a Visited Set)
    public ListNode getIntersectionNodeApproach1(ListNode headA, ListNode headB) {
        // Maintain Set
        Set<ListNode> set = new HashSet<>();
        while(headB!=null){
            set.add(headB);
            headB = headB.next;
        }
        while(headA!=null){
            if(set.contains(headA)){
                    return headA; // here i return intersection node
            }
            headA = headA.next;
        }
        return null;
    }
}
